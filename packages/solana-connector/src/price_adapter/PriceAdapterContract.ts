import { Program, Provider, web3 } from "@coral-xyz/anchor";
import { AccountInfo, PublicKey } from "@solana/web3.js";
// eslint-disable-next-line import/no-duplicates
import { RedstoneSolanaPriceAdapter as PriceAdapter } from "../_autogenerated/redstone_solana_price_adapter";
// eslint-disable-next-line import/no-duplicates
import idl from "../_autogenerated/redstone_solana_price_adapter.json";
import { SolanaClient } from "../client/SolanaClient";
import { PriceData } from "../types";
import { makeFeedIdBytes, makePriceSeed } from "../utils";

export class PriceAdapterContract {
  readonly program: Program<PriceAdapter>;

  constructor(
    address: string,
    provider: Provider,
    private readonly client: SolanaClient
  ) {
    const priceAdapter = { ...idl, address } as PriceAdapter;
    this.program = new Program(priceAdapter, provider);
  }

  private static getPriceDataAccount(programId: PublicKey, feedId: string): PublicKey {
    return web3.PublicKey.findProgramAddressSync(
      [makePriceSeed(), makeFeedIdBytes(feedId)],
      programId
    )[0];
  }

  async getMultiplePriceData(feedIds: string[], slot?: number): Promise<(PriceData | undefined)[]> {
    if (feedIds.length === 1) {
      return [await this.getPriceData(feedIds[0], slot)];
    }

    const accounts = feedIds.map((feedId) =>
      PriceAdapterContract.getPriceDataAccount(this.program.programId, feedId)
    );

    return await this.client.getMultipleAccountsInfo(
      accounts,
      (accountInfo) => this.parsePriceDataAccountResponse(accountInfo),
      `getMultiplePriceData for [${feedIds.toString()}]`,
      slot
    );
  }

  async getPriceData(feedId: string, slot?: number): Promise<PriceData> {
    const address = PriceAdapterContract.getPriceDataAccount(this.program.programId, feedId);

    return await this.client.getAccountInfo(
      address,
      (accountInfo) => this.parsePriceDataAccountResponse(accountInfo),
      slot,
      `getPriceData of ${feedId}`
    );
  }

  private parsePriceDataAccountResponse(response: AccountInfo<Buffer>): PriceData {
    return this.program.coder.accounts.decode("priceData", response.data);
  }

  async writePriceTx(user: PublicKey, feedId: string, payload: string) {
    return await this.program.methods
      .writePrice(Array.from(makeFeedIdBytes(feedId)), Buffer.from(payload, "hex"))
      .accountsStrict({
        user,
        priceAccount: PriceAdapterContract.getPriceDataAccount(this.program.programId, feedId),
        systemProgram: web3.SystemProgram.programId,
      })
      .instruction();
  }

  async getUniqueSignerThreshold(slot?: number): Promise<number> {
    return await this.client.viewMethod(
      this.program.methods.uniqueSignersCount(),
      slot,
      "getUniqueSignerThreshold"
    );
  }
}
