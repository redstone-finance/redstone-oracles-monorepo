import { Program, web3 } from "@coral-xyz/anchor";
import { MultiExecutor } from "@redstone-finance/utils";
import { Connection, PublicKey } from "@solana/web3.js";
import { PriceAdapter } from "../_autogenerated/price_adapter";
import * as idl from "../_autogenerated/price_adapter.json";
import { AnchorReadonlyProvider } from "../solana/AnchorReadonlyProvider";
import {
  ALL_EXECUTIONS_TIMEOUT_MS,
  SINGLE_EXECUTION_TIMEOUT_MS,
} from "../SolanaConnectionBuilder";
import { PriceData } from "../types";
import { makeFeedIdBytes, makePriceSeed } from "../utils";

export class PriceAdapterContract {
  readonly program: Program<PriceAdapter>;

  static createMultiContract(connection: Connection, address: string) {
    return MultiExecutor.createForSubInstances(
      connection,
      (conn) => new PriceAdapterContract(conn, address),
      {
        getUniqueSignerThreshold: MultiExecutor.ExecutionMode.AGREEMENT,
        getPriceData: MultiExecutor.ExecutionMode.AGREEMENT,
      },
      {
        ...MultiExecutor.DEFAULT_CONFIG,
        singleExecutionTimeoutMs: SINGLE_EXECUTION_TIMEOUT_MS,
        allExecutionsTimeoutMs: ALL_EXECUTIONS_TIMEOUT_MS,
      }
    );
  }

  constructor(connection: Connection, address: string) {
    const priceAdapter = { ...idl, address } as PriceAdapter;
    this.program = new Program(
      priceAdapter,
      new AnchorReadonlyProvider(connection)
    );
  }

  private getPriceDataAccount(feedId: string): web3.PublicKey {
    return web3.PublicKey.findProgramAddressSync(
      [makePriceSeed(), makeFeedIdBytes(feedId)],
      this.program.programId
    )[0];
  }

  public getPriceData(feedId: string): Promise<PriceData> {
    const address = this.getPriceDataAccount(feedId);

    return this.program.account.priceData.fetch(address, "processed");
  }

  public async writePriceTx(user: PublicKey, feedId: string, payload: string) {
    return await this.program.methods
      .writePrice(
        Array.from(makeFeedIdBytes(feedId)),
        Buffer.from(payload, "hex")
      )
      .accountsStrict({
        user,
        priceAccount: this.getPriceDataAccount(feedId),
        systemProgram: web3.SystemProgram.programId,
      })
      .instruction();
  }

  public async getUniqueSignerThreshold(): Promise<number> {
    return (await this.program.methods.uniqueSignersCount().view()) as number;
  }
}
