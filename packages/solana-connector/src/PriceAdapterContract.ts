import { Program, Provider, web3 } from "@coral-xyz/anchor";
import {
  Keypair,
  PublicKey,
  sendAndConfirmTransaction,
  Transaction,
  TransactionInstruction,
} from "@solana/web3.js";
import { PriceAdapter } from "./_autogenerated/price_adapter";
import * as idl from "./_autogenerated/price_adapter.json";
import { PriceData } from "./types";
import { makeFeedIdBytes, makePriceSeed } from "./utils";

export class PriceAdapterContract {
  readonly program: Program<PriceAdapter>;

  constructor(
    provider: Provider,
    address: string,
    private keypair?: Keypair
  ) {
    const priceAdapter = { ...idl, address } as PriceAdapter;
    this.program = new Program(priceAdapter, provider);
  }

  public getPriceDataAccount(feedId: string): web3.PublicKey {
    return web3.PublicKey.findProgramAddressSync(
      [makePriceSeed(), makeFeedIdBytes(feedId)],
      this.program.programId
    )[0];
  }

  public getPriceData(feedId: string): Promise<PriceData> {
    const address = this.getPriceDataAccount(feedId);

    return this.program.account.priceData.fetch(address, "processed");
  }

  public async writePrice(feedId: string, payload: string) {
    if (!this.program.provider.publicKey || !this.keypair) {
      throw new Error("Provider or keypair is empty");
    }
    const ix = await this.writePriceIx(this.keypair.publicKey, feedId, payload);

    const tx = new Transaction();
    tx.add(ix);

    return await sendAndConfirmTransaction(
      this.program.provider.connection,
      tx,
      [this.keypair]
    );
  }

  private async writePriceIx(
    user: PublicKey,
    feedId: string,
    payload: string
  ): Promise<TransactionInstruction> {
    return await this.program.methods
      .writePrice(
        Array.from(makeFeedIdBytes(feedId)),
        Buffer.from(payload, "hex")
      )
      .accountsStrict({
        user,
        priceAccount: this.getPriceDataAccount(feedId),
        systemProgram: web3.SystemProgram.programId,
      })
      .instruction();
  }

  public async getUniqueSignerThreshold(): Promise<number> {
    return (await this.program.methods.uniqueSignersCount().view()) as number;
  }
}
