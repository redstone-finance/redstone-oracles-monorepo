import path from "path";
import { readCluster } from "../src";
import { getAccountInfo } from "./get-account-info";
import { CONTRACT_NAME, readDeployDir } from "./utils";
import { writeKeypairToFile } from "./write-keypair-to-file";

const TS_SRC_DIR = `${__dirname}/../src`;

export async function buildCmd(
  withBuild: boolean,
  isVerifiable: boolean,
  withDeploy: "deploy" | "upgrade" | "no",
  programAddress: string | undefined,
  deployDir = readDeployDir(),
  cluster = readCluster()
) {
  const pkData = writeKeypairToFile(deployDir);
  await getAccountInfo(pkData.publicKey, cluster);
  const clusterName = cluster === "mainnet-beta" ? "mainnet" : cluster;

  const anchorProviderArgs = `--provider.cluster ${clusterName} --provider.wallet ${pkData.filename}`;
  const anchorArgs = `--program-name ${CONTRACT_NAME.replaceAll("_", "-")}  ${anchorProviderArgs}`;
  const autogeneratedDir = path.join(
    path.resolve(deployDir, TS_SRC_DIR),
    "_autogenerated"
  );

  const builtProgramPath = `target/deploy/${CONTRACT_NAME}.so`;
  const buildCmds = [
    `cd ${deployDir}`,
    withBuild
      ? isVerifiable
        ? `solana-verify build --library-name ${CONTRACT_NAME}`
        : `anchor build ${anchorArgs} --idl-ts ${autogeneratedDir} --idl ${autogeneratedDir}`
      : `ls -lf ${builtProgramPath}`,
  ];

  if (withDeploy !== "no") {
    buildCmds.push(
      withDeploy === "upgrade"
        ? `anchor upgrade --program-id ${programAddress!} ${anchorProviderArgs} ${builtProgramPath}`
        : `anchor deploy ${anchorArgs} --program-keypair ${programAddress!}.json`
    );
  }

  return {
    cmd: buildCmds.join(" && "),
    pkData,
    builtProgramPath,
  };
}
