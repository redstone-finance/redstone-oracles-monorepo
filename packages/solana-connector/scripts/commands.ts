import { Cluster } from "@solana/web3.js";
import path from "path";
import { readCluster } from "../src";
import { getAccountInfo } from "./get-account-info";
import { CONTRACT_NAME, readDeployDir } from "./utils";
import { writeKeypairToFile } from "./write-keypair-to-file";

const TS_SRC_DIR = `${__dirname}/../src`;

export async function buildCmd(args: {
  withBuild: boolean;
  isVerifiable: boolean;
  withDeploy: "deploy" | "upgrade" | "no";
  programAddress: string | undefined;
  deployDir?: string;
  cluster?: Cluster;
}) {
  const {
    withBuild,
    isVerifiable,
    withDeploy,
    programAddress,
    deployDir = readDeployDir(),
    cluster = readCluster(),
  } = args;

  const needsKeypair = withDeploy !== "no";
  const pkData = needsKeypair ? writeKeypairToFile(deployDir) : null;

  if (pkData) {
    await getAccountInfo(pkData.publicKey, cluster);
  }

  const clusterName = cluster === "mainnet-beta" ? "mainnet" : cluster;
  const contractNameKebab = CONTRACT_NAME.replaceAll("_", "-");
  const autogeneratedDir = path.join(path.resolve(deployDir, TS_SRC_DIR), "_autogenerated");
  const builtProgramPath = `target/deploy/${CONTRACT_NAME}.so`;

  const buildCmds = [`cd ${deployDir}`];

  if (withBuild) {
    const buildCmd = isVerifiable
      ? `solana-verify build --library-name ${CONTRACT_NAME}`
      : `anchor build --program-name ${contractNameKebab} --provider.cluster ${clusterName} --provider.wallet ${pkData?.filename} --idl-ts ${autogeneratedDir} --idl ${autogeneratedDir}`;
    buildCmds.push(buildCmd);
  } else {
    buildCmds.push(`ls -lf ${builtProgramPath}`);
  }

  if (withDeploy !== "no" && pkData && programAddress) {
    const deployCmd =
      withDeploy === "upgrade"
        ? `anchor upgrade --program-id ${programAddress} --provider.cluster ${clusterName} --provider.wallet ${pkData.filename} ${builtProgramPath}`
        : `anchor deploy --program-name ${contractNameKebab} --provider.cluster ${clusterName} --provider.wallet ${pkData.filename} --program-keypair ${programAddress}.json`;
    buildCmds.push(deployCmd);
  }

  return {
    cmd: buildCmds.join(" && "),
    pkData,
    builtProgramPath,
  };
}
