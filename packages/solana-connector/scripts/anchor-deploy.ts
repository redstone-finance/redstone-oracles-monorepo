import { execSync } from "child_process";
import "dotenv/config";
import path from "node:path";
import { setTimeout } from "timers/promises";
import { readCluster } from "../src";
import { RDS_PROGRAM_ADDRESS } from "./consts";
import { getAccountInfo } from "./get-account-info";
import { CONTRACT_NAME, readDeployDir } from "./utils";
import { writeKeypairToFile } from "./write-keypair-to-file";

const TS_SRC_DIR = `${__dirname}/../src`;
const IS_VERIFIABLE: boolean = true; // Docker is needed for the verifiable build
const IS_UPGRADE: boolean = true;
const WITH_BUILD: boolean = true;

async function deploy(
  address: string,
  deployDir = readDeployDir(),
  cluster = readCluster()
) {
  const pkData = writeKeypairToFile(deployDir);
  await getAccountInfo(pkData.publicKey, cluster);
  const clusterName = cluster === "mainnet-beta" ? "mainnet" : cluster;

  const anchorProviderArgs = `--provider.cluster ${clusterName} --provider.wallet ${pkData.filename}`;
  const anchorArgs = `--program-name ${CONTRACT_NAME.replaceAll("_", "-")}  ${anchorProviderArgs}`;
  const autogeneratedDir = path.join(
    path.resolve(deployDir, TS_SRC_DIR),
    "_autogenerated"
  );
  const verifiable = IS_VERIFIABLE ? " --verifiable" : "";
  const builtProgramPath = `target/${IS_VERIFIABLE ? "verifiable" : "deploy"}/${CONTRACT_NAME}.so`;
  const deployCmds = [
    `cd ${deployDir}`,
    WITH_BUILD
      ? `anchor build${verifiable} ${anchorArgs} --idl-ts ${autogeneratedDir} --idl ${autogeneratedDir}`
      : `ls -lf ${builtProgramPath}`,
    IS_UPGRADE
      ? `anchor upgrade --program-id ${address} ${anchorProviderArgs} ${builtProgramPath}`
      : `anchor deploy${verifiable} ${anchorArgs} --program-keypair ${address}.json`,
  ];

  execSync(deployCmds.join(" && "), {
    stdio: ["inherit", "inherit", "inherit"],
  });
}

async function main() {
  await deploy(RDS_PROGRAM_ADDRESS);

  await setTimeout(15_000); // wait 15 seconds before continuing
}

void main();
