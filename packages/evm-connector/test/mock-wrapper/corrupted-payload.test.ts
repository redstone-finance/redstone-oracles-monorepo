import { expect } from "chai";
import { ethers } from "hardhat";
import { utils } from "redstone-protocol";
import { WrapperBuilder } from "../../src/index";
import { BaseWrapper } from "../../src/wrappers/BaseWrapper";
import { SampleRedstoneConsumerNumericMockManyDataFeeds } from "../../typechain-types";
import { expectedNumericValues, mockNumericPackages } from "../tests-common";

class CustomPayloadWrapper extends BaseWrapper {
  constructor(private customRedstonePayload: string) {
    super();
  }

  async getBytesDataForAppending(): Promise<string> {
    return this.customRedstonePayload;
  }
}

describe("Corrupted payload", function () {
  let contract: SampleRedstoneConsumerNumericMockManyDataFeeds;

  const correctRedstonePayload =
    "42544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000997b61c00455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4610900534f4d45204f544845522049442030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b00534f4d45204f544845522049442031000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c000000020000004e1ee42985786d4c585ba89b3caa8f18639043b46d21fb2bac88440654ea7b90031762da25f8d0aee90b74b2b26aca045c19befd1bbbaf1da92366ab8b3191ae01b4254430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000091494c600455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa56ea00534f4d45204f544845522049442031000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c00000002000000331313b99cf46817930f71c823a02d39201f5feac8c47b568df032a808fc481a16f3ef616c323fa17dbbcc5dc2caa637636d4a465da23c55fe35456cce1a4d3f11b425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f9000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001004ccb00534f4d45204f544845522049442032000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c0000000200000036ac6e540f1821b25000769ce82010af7306f2106aea4ef8dd6d90d622e74ba0e1f06380d25bd046e39125e1c48a352bd9b1d0c55ba8fc99a0b9390585d9816841b425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f9000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa56ea00534f4d45204f544845522049440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c0000000200000038ab783cb9db1d1372e6948b6573d0f0055b5f1536d601afcc52273b9bb7eb4be626805ac312c3d45df9e20d595330c4e820211c36c6c9d643b2079a1b314d6631b425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f9000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa56ea00534f4d45204f544845522049440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c0000000200000036f64ba0f838a2032b6f00e9d082fc39356907b3ecdee259b1773c1e578935de52c55ba76cfffa33357725cabbe6a2ab57b3c12a591f55752f308974529c2c0011b425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f9000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa56ea00534f4d45204f544845522049440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c000000020000003306c82e2ebd52cf15bcfdb4c8dcac44f50bd5c08b3f26b3a8405cd6bd4d5fce41f9c2dc22db32cf90362796faa70cdf8820c345bb9ae320253f422d031625a371c425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f9000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa56ea00534f4d45204f544845522049440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c00000002000000364b0c019bf063e28f572face07150450dbdbd88c8aa273d6a677b069d0ded093111a4621627a112c43de6f7fa332e417b150b437052201e78f28850b2a0ced311b425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f9000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa56ea00534f4d45204f544845522049440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c00000002000000356fff3f95091c7521462fa900631f0eb14dbf8cb34f1759a4dd70e74b8e373ac67e0829a13377137880b1af587fb9ea5fb621ce7bc8da8a3fcd8518a8b8024ba1b425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f9000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa56ea00534f4d45204f544845522049440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c000000020000003664b1f3b9291bf5e253a1d741be17559bb1a8e558892efb3a79329ded7d591780fdbb02cc414aee21c6f7d1fae6349a1105344448ba41141780d4f9e5fb7637a1b425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f9000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa56ea00534f4d45204f544845522049440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dd231b0001812f2590c00000002000000368d68e0657a6a7eaa81e886800a67ae9d27713e998d83a45ebef5f364012d0ef7263dad02b16e6bc8eaaf0c3432d201a1e437065840ff5be40b2cf338b6c80a01b000a332e302e30236d6f636b00000a000002ed57011e0000";

  const testShouldRevert = async (payload: string) => {
    const wrappedContract = new CustomPayloadWrapper(
      payload
    ).overwriteEthersContract(contract);

    await expect(
      wrappedContract.save2ValuesInStorage(
        ["BTC", "ETH"].map(utils.convertStringToBytes32)
      )
    ).to.be.reverted;
  };

  this.beforeEach(async () => {
    const ContractFactory = await ethers.getContractFactory(
      "SampleRedstoneConsumerNumericMockManyDataFeeds"
    );
    contract = await ContractFactory.deploy();
    await contract.deployed();
  });

  it("Should work properly with the correct redstone payload", async () => {
    const wrappedContract =
      WrapperBuilder.wrap(contract).usingMockData(mockNumericPackages);

    const tx = await wrappedContract.save2ValuesInStorage([
      utils.convertStringToBytes32("BTC"),
      utils.convertStringToBytes32("ETH"),
    ]);
    await tx.wait();

    const firstValueFromContract = await contract.firstValue();
    const secondValueFromContract = await contract.secondValue();

    expect(firstValueFromContract.toNumber()).to.be.equal(
      expectedNumericValues.BTC
    );
    expect(secondValueFromContract.toNumber()).to.be.equal(
      expectedNumericValues.ETH
    );
  });

  it("Should revert for corrupted payload (wrong 1 byte in the beginning)", async () => {
    const modifiedPayload = "fe" + correctRedstonePayload.substring(2);
    await testShouldRevert(modifiedPayload);
  });

  it("Should revert for corrupted payload - incorrect (bigger) data points count in the last data package", async () => {
    const modifiedPayload = correctRedstonePayload.replace(
      "01812f2590c000000020000004",
      "01812f2590c000000020000005" // changed data points count from 4 to 5
    );
    await testShouldRevert(modifiedPayload);
  });

  it("Should revert for corrupted payload - incorrect (smaller) data points count in the last data package", async () => {
    const modifiedPayload = correctRedstonePayload.replace(
      "01812f2590c000000020000004",
      "01812f2590c000000020000003" // changed data points count from 4 to 3
    );
    await testShouldRevert(modifiedPayload);
  });

  it("Should revert for corrupted payload - incorrect (bigger) data points count in the first data package", async () => {
    const modifiedPayload = correctRedstonePayload.replace(
      "01812f2590c00000002000000368",
      "01812f2590c00000002000000468" // changed data points count from 3 to 4
    );
    await testShouldRevert(modifiedPayload);
  });

  it("Should revert for corrupted payload - incorrect (smaller) data points count in the first data package", async () => {
    const modifiedPayload = correctRedstonePayload.replace(
      "01812f2590c00000002000000368",
      "01812f2590c00000002000000268" // changed data points count from 3 to 2
    );
    await testShouldRevert(modifiedPayload);
  });
});
