#include "stdlib.fc";

#include "utils/contract_flow.fc";
#include "utils/contract_constants.fc";

#include "redstone/dict.fc";
#include "redstone/processor.fc";
#include "redstone/redstone.fc";
#include "redstone/tuple.fc";
#include "redstone/constants.fc";

;; =============== storage =============================

global int timestamp;
global int signer_count_threshold;
global cell signers;
global cell values_dict;

() load_data() impure {
    cell data = get_data();
    slice ds = data.begin_parse();

    signer_count_threshold = ds~load_uint(SIGNER_COUNT_THRESHOLD_BITS);
    timestamp = ds~load_uint(TIMESTAMP_BITS);
    signers = ds~load_ref();
    values_dict = ds.slice_refs_empty?() ? new_dict() : ds~load_ref();
}

() save_data() impure {
    set_data(begin_cell()
    .store_uint(signer_count_threshold, SIGNER_COUNT_THRESHOLD_BITS)
    .store_uint(timestamp, TIMESTAMP_BITS)
    .store_ref(signers)
    .store_ref(values_dict)
    .end_cell());
}

;; =============== write =============================

(tuple, int) get_prices(tuple, cell) impure;

() write_prices(cell data_feeds_cell, cell payload_cell) impure {
    tuple data_feeds = data_feeds_cell.tuple_deserialize_integers();

    ~dump(data_feeds);

    var (values, min_timestamp) = get_prices(data_feeds, payload_cell);

    throw_unless(ERR_TOO_OLD_TIMESTAMP, min_timestamp > timestamp);
    timestamp = min_timestamp;

    values_dict = dict_from_keys_and_values(data_feeds, values, DATA_FEED_ID_BITS, MAX_VALUE_SIZE_BITS);

    save_data();
}

;; =============== messages =============================

() recv_internal(int, int, cell in_msg_full, slice in_msg_body) impure {
    (int op, slice cs) = in_msg_body~init(in_msg_full);

    load_data();

    if (op == OP_REDSTONE_WRITE_PRICES) {
        cell data_feeds_cell = in_msg_body~load_ref();
        cell payload_cell = in_msg_body~load_ref();

        write_prices(data_feeds_cell, payload_cell);

        return cs~send_carry_message();
    }

    if (op == OP_REDSTONE_FETCH_DATA) {
        int feed_id = in_msg_body~load_uint(DATA_FEED_ID_BITS);
        (int value, int success) = values_dict.udict_get_uint?(KEY_LENGTH_BITS, feed_id, MAX_VALUE_SIZE_BITS);

        throw_unless(ERR_MISSING_DATA, success);

        builder content = in_msg_body.builder_with_preloaded_ref()
                .store_uint(value, MAX_VALUE_SIZE_BITS)
                .store_uint(timestamp, TIMESTAMP_BITS);

        return cs~send_return_message(OP_REDSTONE_DATA_FETCHED, content);
    }
}

;; =============== getters =============================

(tuple) read_prices(tuple data_feed_ids) method_id {
    load_data();

    return dict_values_for_keys(values_dict, data_feed_ids, DATA_FEED_ID_BITS, MAX_VALUE_SIZE_BITS, 0);
}

(int) read_timestamp() method_id {
    load_data();

    return timestamp;
}

(tuple, int) get_prices(tuple data_feed_ids, cell payload) method_id {
    load_data();

    (tuple values, int min_timestamp) = process_payload(
        payload,
        data_feed_ids,
        tuple_deserialize_integers(signers),
        signer_count_threshold,
        now());

    ~dump(values);
    ~dump(min_timestamp);

    return (values, min_timestamp);
}

(cell) get_prices_v2(cell data_feed_ids, cell payload) method_id {
    (tuple values, _) = get_prices(tuple_deserialize_integers(data_feed_ids), payload);

    return values.tuple_to_cell(MAX_VALUE_SIZE_BITS);
}
