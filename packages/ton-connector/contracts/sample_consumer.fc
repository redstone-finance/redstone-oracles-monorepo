#include "stdlib.fc";

#include "utils/contract_flow.fc";
#include "utils/contract_constants.fc";

#include "redstone/constants.fc";

global slice feed_address_slice;

() load_data() impure {
    var ds = get_data().begin_parse();

    feed_address_slice = ds~load_msg_addr();
}

() recv_internal(int, int, cell in_msg_full, slice in_msg_body) impure {
    (int op, slice cs) = in_msg_body~init(in_msg_full);

    load_data();

    if (op == OP_REDSTONE_READ_DATA) {
        return cs~send_forward_message(OP_REDSTONE_READ_DATA, feed_address_slice, begin_cell());
    }

    if (op == OP_REDSTONE_DATA_READ) {
        slice initial_sender = in_msg_body~verify_return_message(cs, feed_address_slice);

        var feed_id = in_msg_body~load_uint(DATA_FEED_ID_BITS);
        var price = in_msg_body~load_uint(MAX_VALUE_SIZE_BITS);
        var timestamp = in_msg_body~load_uint(TIMESTAMP_BITS);

        ~dump(feed_id);
        ~dump(price);
        ~dump(timestamp);
        ~dump(initial_sender);

        return send_carry_message_to_addr(initial_sender);
    }
}
