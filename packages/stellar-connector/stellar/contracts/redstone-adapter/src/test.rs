#![cfg(test)]

use soroban_sdk::{vec, Bytes, Env, String, U256};

use super::*;

#[test]
fn test_write_prices() {
    let mut ledger = Env::default().to_ledger_snapshot();
    ledger.timestamp = 1752486200;
    let env = Env::from_ledger_snapshot(ledger);
    env.mock_all_auths();

    let contract_id = env.register(Contract, ());
    let client = ContractClient::new(&env, &contract_id);
    let payload: Bytes = Bytes::from_slice(&env, &get_test_payload());

    let btc = String::from_str(&env, "BTC");
    let eth = String::from_str(&env, "ETH");
    let words = client.write_prices(&client.address, &vec![&env, btc, eth], &payload);
    assert_eq!(
        words,
        (
            1752486200000,
            vec![
                &env,
                U256::from_u128(&env, 12203219199900),
                U256::from_u128(&env, 305722069150),
            ],
        ),
    );
}

#[test]
fn test_read_price_data() {
    let mut ledger = Env::default().to_ledger_snapshot();
    ledger.timestamp = 1752486205;
    let env = Env::from_ledger_snapshot(ledger);
    env.mock_all_auths();

    let contract_id = env.register(Contract, ());
    let client = ContractClient::new(&env, &contract_id);
    let payload: Bytes = Bytes::from_slice(&env, &get_test_payload());

    let btc = String::from_str(&env, "BTC");
    let eth = String::from_str(&env, "ETH");
    client.write_prices(
        &client.address,
        &vec![&env, btc.clone(), eth.clone()],
        &payload,
    );
    let data = client.read_price_data(&vec![&env, btc, eth]);
    assert_eq!(
        data,
        vec![
            &env,
            PriceData {
                price: U256::from_u128(&env, 12203219199900),
                package_timestamp: 1752486200000,
                write_timestamp: 1752486205000,
            },
            PriceData {
                price: U256::from_u128(&env, 305722069150),
                package_timestamp: 1752486200000,
                write_timestamp: 1752486205000,
            },
        ]
    );
}

pub fn get_test_payload() -> [u8; 866] {
    [
        0x42, 0x54, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x19,
        0x48, 0x8b, 0xa7, 0x9c, 0x01, 0x98, 0x08, 0x51, 0x42, 0xc0, 0x00, 0x00, 0x00, 0x20, 0x00,
        0x00, 0x01, 0xf1, 0x30, 0xda, 0xac, 0x1b, 0xae, 0x49, 0x1c, 0x35, 0xba, 0x70, 0x76, 0x05,
        0x44, 0x00, 0xde, 0x03, 0x65, 0x55, 0xe1, 0xcb, 0x78, 0x10, 0x9b, 0x38, 0xf8, 0x1a, 0x8b,
        0x3c, 0x37, 0x37, 0x1c, 0x33, 0xf9, 0x35, 0x29, 0x22, 0x19, 0x9a, 0x82, 0x0d, 0x93, 0x6a,
        0x83, 0xcc, 0x24, 0xe8, 0xd1, 0x60, 0x10, 0xa4, 0xf7, 0xee, 0xfd, 0x8f, 0x4c, 0x9d, 0xab,
        0x06, 0xf8, 0x47, 0x0a, 0xbc, 0x02, 0x1b, 0x42, 0x54, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x19, 0x48, 0x8b, 0xa7, 0x9c, 0x01, 0x98, 0x08, 0x51,
        0x42, 0xc0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0xc8, 0xb7, 0xa8, 0x4d, 0xc1, 0xea,
        0x10, 0x6d, 0x55, 0xb0, 0x98, 0xc9, 0x11, 0xce, 0x74, 0x77, 0x3d, 0x47, 0x79, 0x5f, 0xf4,
        0x90, 0xd4, 0xa1, 0x92, 0x2b, 0x7e, 0x6c, 0xf0, 0x58, 0x56, 0x8a, 0x00, 0x63, 0x9c, 0x8d,
        0x62, 0x2a, 0xa5, 0x4f, 0x6f, 0xcd, 0x1d, 0xde, 0xda, 0x4d, 0x5e, 0x57, 0x3e, 0xdf, 0xf5,
        0x3e, 0x3a, 0x02, 0x6d, 0xc6, 0xd6, 0x18, 0x15, 0x6a, 0x80, 0x99, 0x4c, 0xf6, 0x1c, 0x42,
        0x54, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x19, 0x48,
        0x8b, 0xa7, 0x9c, 0x01, 0x98, 0x08, 0x51, 0x42, 0xc0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
        0x01, 0x3e, 0x01, 0xe6, 0xc8, 0x2c, 0x5b, 0x31, 0xee, 0x5a, 0x3f, 0x3f, 0x1f, 0x97, 0x0d,
        0x18, 0x4b, 0x6f, 0x16, 0x82, 0x23, 0x46, 0xd8, 0xc2, 0xdc, 0x3a, 0xb6, 0xc9, 0x12, 0x83,
        0xe6, 0xd5, 0xfb, 0x47, 0x9f, 0xa6, 0x9e, 0xc9, 0xce, 0x31, 0x23, 0x32, 0x4f, 0x27, 0x5e,
        0x26, 0xfd, 0x1b, 0x4c, 0xf2, 0x1c, 0x44, 0x3f, 0x19, 0x75, 0xe4, 0x63, 0xb8, 0x5f, 0xc0,
        0x27, 0x28, 0x33, 0x58, 0x1a, 0x1c, 0x45, 0x54, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x2e, 0x74, 0x90, 0x9e, 0x01, 0x98, 0x08, 0x51, 0x42,
        0xc0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0xab, 0xda, 0x59, 0xa8, 0x72, 0x09, 0xa9,
        0x1d, 0x24, 0x0d, 0x58, 0x3f, 0xba, 0x7c, 0xf8, 0x59, 0x4d, 0x10, 0x48, 0x81, 0x48, 0x89,
        0xda, 0x51, 0x72, 0xa6, 0x75, 0x56, 0xf4, 0x95, 0xa9, 0x80, 0x7d, 0xcf, 0xe1, 0x90, 0x4a,
        0x02, 0xda, 0x11, 0x5b, 0x79, 0x91, 0xff, 0xd1, 0xaa, 0x94, 0xa5, 0xac, 0x29, 0x6d, 0x9d,
        0x2e, 0xff, 0x86, 0xa3, 0xc5, 0x58, 0xde, 0x66, 0xdd, 0x2c, 0x29, 0xcf, 0x1b, 0x45, 0x54,
        0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x2e, 0x74,
        0x90, 0x9e, 0x01, 0x98, 0x08, 0x51, 0x42, 0xc0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01,
        0xc1, 0xf1, 0x0f, 0x5a, 0x59, 0x94, 0xd7, 0xc9, 0x86, 0x5f, 0xb8, 0xb4, 0xa9, 0xca, 0xe3,
        0xf4, 0xd0, 0xf3, 0x33, 0x1e, 0x52, 0xb8, 0x1f, 0xc0, 0x6c, 0xe6, 0xe7, 0x0d, 0x7e, 0xdc,
        0x84, 0x4d, 0x0a, 0x66, 0xa2, 0x0d, 0xde, 0x74, 0x98, 0xdb, 0xcb, 0xd7, 0xf6, 0x63, 0xf8,
        0x26, 0x13, 0x54, 0x7a, 0xc3, 0x3b, 0x8f, 0xf7, 0x36, 0xce, 0x8f, 0x32, 0x01, 0xf0, 0x89,
        0xb7, 0xff, 0xb9, 0xb8, 0x1c, 0x45, 0x54, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x47, 0x2e, 0x20, 0xa2, 0x18, 0x01, 0x98, 0x08, 0x51, 0x42, 0xc0,
        0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0xcd, 0x67, 0xf2, 0xe7, 0xaa, 0x94, 0x95, 0x97,
        0xbf, 0x7d, 0x84, 0x18, 0xdc, 0x93, 0x44, 0x7e, 0xf8, 0x90, 0x0a, 0x3e, 0xb1, 0xdc, 0x0f,
        0x97, 0x72, 0x70, 0x64, 0x0e, 0xe6, 0x8d, 0xa9, 0xab, 0x65, 0x4d, 0xfe, 0x48, 0xdd, 0xe9,
        0x3e, 0x03, 0xcf, 0xbd, 0xab, 0x59, 0x4a, 0x7d, 0xe1, 0xe9, 0xb0, 0x98, 0x63, 0x96, 0xb4,
        0x23, 0x2a, 0x95, 0x63, 0x4e, 0x5e, 0x37, 0x0b, 0x32, 0x34, 0xab, 0x1b, 0x00, 0x06, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x02, 0xed, 0x57, 0x01, 0x1e, 0x00, 0x00,
    ]
}
