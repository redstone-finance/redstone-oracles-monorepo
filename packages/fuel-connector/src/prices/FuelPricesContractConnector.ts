import { IPricesContractAdapter } from "@redstone-finance/sdk";
import { Account } from "fuels";
import { Prices } from "../autogenerated";
import { FUEL_BASE_GAS_LIMIT } from "../FuelConnector";
import { FuelContractConnector } from "../FuelContractConnector";
import { FuelPricesContractAdapter } from "./FuelPricesContractAdapter";

export type FuelPricesContract = Prices;

export class FuelPricesContractConnector extends FuelContractConnector<IPricesContractAdapter> {
  constructor(
    wallet: Account | undefined,
    private contractId: string,
    gasLimit = FUEL_BASE_GAS_LIMIT
  ) {
    super(wallet, gasLimit);
  }

  getContract(): FuelPricesContract {
    return new Prices(this.contractId, this.wallet!);
  }

  async getAdapter(): Promise<IPricesContractAdapter> {
    return await Promise.resolve(
      new FuelPricesContractAdapter(this.getContract(), this.getGasLimit())
    );
  }

  override async waitForTransaction(txId: string): Promise<boolean> {
    const response = await this.wallet!.provider.getTransactionResponse(txId);
    const result = await response.waitForResult();

    return result.isStatusSuccess;
  }
}
