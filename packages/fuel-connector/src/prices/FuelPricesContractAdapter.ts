import {
  ContractParamsProvider,
  IPricesContractAdapter,
} from "@redstone-finance/sdk";
import { InvocationResult } from "fuels";
import { U256Output } from "../autogenerated/PricesAbi";
import { num, u256 } from "../u256-utils";
import { FuelPricesContract } from "./FuelPricesContractConnector";

export class FuelPricesContractAdapter implements IPricesContractAdapter {
  constructor(
    protected contract: FuelPricesContract,
    private gasLimit: number
  ) {}

  protected static extractNumbers(
    result: InvocationResult<U256Output[]>
  ): number[] {
    return result.value.map(num);
  }

  async getPricesFromPayload(
    paramsProvider: ContractParamsProvider
  ): Promise<number[]> {
    return FuelPricesContractAdapter.extractNumbers(
      await this.contract.functions
        .get_prices(
          paramsProvider.getHexlifiedFeedIds().map(u256),
          await paramsProvider.getPayloadData()
        )
        .get()
    );
  }

  async writePricesFromPayloadToContract(
    paramsProvider: ContractParamsProvider
  ): Promise<string | number[]> {
    return FuelPricesContractAdapter.extractNumbers(
      await this.contract.functions
        .write_prices(
          paramsProvider.getHexlifiedFeedIds().map(u256),
          await paramsProvider.getPayloadData()
        )
        .txParams({
          gasLimit: this.gasLimit,
          gasPrice: 1,
        })
        .call()
    );
  }

  async readTimestampFromContract(): Promise<number> {
    return (
      await this.contract.functions.read_timestamp().get()
    ).value.toNumber();
  }

  async readPricesFromContract(
    paramsProvider: ContractParamsProvider
  ): Promise<number[]> {
    return FuelPricesContractAdapter.extractNumbers(
      await this.contract.functions
        .read_prices(paramsProvider.getHexlifiedFeedIds().map(u256))
        .get()
    );
  }
}
