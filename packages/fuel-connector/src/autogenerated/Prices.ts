/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
*/

import type {
  AbstractAddress,
  Account,
  BigNumberish,
  BN,
  Bytes,
  FunctionFragment,
  InvokeFunction,
  Provider,
  StorageSlot,
} from "fuels";
import { Contract, Interface } from "fuels";

import type { Enum, Option, Vec } from "./common";

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export type RedStoneErrorInput = Enum<{
  EmptyAllowedSigners: undefined;
  SignerCountThresholdToSmall: undefined;
  DuplicateSignerFound: undefined;
  SenderIsNotTheOwner: [IdentityInput, Option<IdentityInput>];
  TimestampMustBeGreaterThanBefore: [BigNumberish, BigNumberish];
}>;
export type RedStoneErrorOutput = Enum<{
  EmptyAllowedSigners: void;
  SignerCountThresholdToSmall: void;
  DuplicateSignerFound: void;
  SenderIsNotTheOwner: [IdentityOutput, Option<IdentityOutput>];
  TimestampMustBeGreaterThanBefore: [BN, BN];
}>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

const abi = {
  programType: "contract",
  specVersion: "1",
  encodingVersion: "1",
  concreteTypes: [
    {
      type: "()",
      concreteTypeId:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
    },
    {
      type: "(struct std::vec::Vec<u256>, u64)",
      concreteTypeId:
        "e34c2f53d80f2667116e2b1d557ef6e30cf510868fad2bfd788d50d506cd44e0",
      metadataTypeId: 0,
    },
    {
      type: "b256",
      concreteTypeId:
        "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
    },
    {
      type: "enum common::check::RedStoneError",
      concreteTypeId:
        "2801e3d51186db56fbc40e85aa87d50cbb39bc26a0ed79f047fd1908d0656c4e",
      metadataTypeId: 3,
    },
    {
      type: "enum std::option::Option<u256>",
      concreteTypeId:
        "d601d33973e88992430b8137fe37206cc386110534c47d966d6b54014c4f1356",
      metadataTypeId: 5,
      typeArguments: [
        "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
      ],
    },
    {
      type: "enum std::option::Option<u64>",
      concreteTypeId:
        "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      metadataTypeId: 5,
      typeArguments: [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      ],
    },
    {
      type: "struct std::bytes::Bytes",
      concreteTypeId:
        "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb",
      metadataTypeId: 9,
    },
    {
      type: "struct std::vec::Vec<b256>",
      concreteTypeId:
        "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198",
      metadataTypeId: 13,
      typeArguments: [
        "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      ],
    },
    {
      type: "struct std::vec::Vec<enum std::option::Option<u256>>",
      concreteTypeId:
        "c976e1cf37e7eb4e2c7ec52fb45b98828666366f0e64e99c5b8dd1683fcf4585",
      metadataTypeId: 13,
      typeArguments: [
        "d601d33973e88992430b8137fe37206cc386110534c47d966d6b54014c4f1356",
      ],
    },
    {
      type: "struct std::vec::Vec<u256>",
      concreteTypeId:
        "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
      metadataTypeId: 13,
      typeArguments: [
        "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
      ],
    },
    {
      type: "u256",
      concreteTypeId:
        "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
    },
    {
      type: "u64",
      concreteTypeId:
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
    },
  ],
  metadataTypes: [
    {
      type: "(_, _)",
      metadataTypeId: 0,
      components: [
        {
          name: "__tuple_element",
          typeId: 13,
          typeArguments: [
            {
              name: "",
              typeId:
                "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
            },
          ],
        },
        {
          name: "__tuple_element",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
    },
    {
      type: "(_, _)",
      metadataTypeId: 1,
      components: [
        {
          name: "__tuple_element",
          typeId: 4,
        },
        {
          name: "__tuple_element",
          typeId: 5,
          typeArguments: [
            {
              name: "",
              typeId: 4,
            },
          ],
        },
      ],
    },
    {
      type: "(_, _)",
      metadataTypeId: 2,
      components: [
        {
          name: "__tuple_element",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "__tuple_element",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
    },
    {
      type: "enum common::check::RedStoneError",
      metadataTypeId: 3,
      components: [
        {
          name: "EmptyAllowedSigners",
          typeId:
            "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
        },
        {
          name: "SignerCountThresholdToSmall",
          typeId:
            "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
        },
        {
          name: "DuplicateSignerFound",
          typeId:
            "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
        },
        {
          name: "SenderIsNotTheOwner",
          typeId: 1,
        },
        {
          name: "TimestampMustBeGreaterThanBefore",
          typeId: 2,
        },
      ],
    },
    {
      type: "enum std::identity::Identity",
      metadataTypeId: 4,
      components: [
        {
          name: "Address",
          typeId: 8,
        },
        {
          name: "ContractId",
          typeId: 11,
        },
      ],
    },
    {
      type: "enum std::option::Option",
      metadataTypeId: 5,
      components: [
        {
          name: "None",
          typeId:
            "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
        },
        {
          name: "Some",
          typeId: 6,
        },
      ],
      typeParameters: [6],
    },
    {
      type: "generic T",
      metadataTypeId: 6,
    },
    {
      type: "raw untyped ptr",
      metadataTypeId: 7,
    },
    {
      type: "struct std::address::Address",
      metadataTypeId: 8,
      components: [
        {
          name: "bits",
          typeId:
            "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
        },
      ],
    },
    {
      type: "struct std::bytes::Bytes",
      metadataTypeId: 9,
      components: [
        {
          name: "buf",
          typeId: 10,
        },
        {
          name: "len",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
    },
    {
      type: "struct std::bytes::RawBytes",
      metadataTypeId: 10,
      components: [
        {
          name: "ptr",
          typeId: 7,
        },
        {
          name: "cap",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
    },
    {
      type: "struct std::contract_id::ContractId",
      metadataTypeId: 11,
      components: [
        {
          name: "bits",
          typeId:
            "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
        },
      ],
    },
    {
      type: "struct std::vec::RawVec",
      metadataTypeId: 12,
      components: [
        {
          name: "ptr",
          typeId: 7,
        },
        {
          name: "cap",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      typeParameters: [6],
    },
    {
      type: "struct std::vec::Vec",
      metadataTypeId: 13,
      components: [
        {
          name: "buf",
          typeId: 12,
          typeArguments: [
            {
              name: "",
              typeId: 6,
            },
          ],
        },
        {
          name: "len",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      typeParameters: [6],
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "allowed_signers",
          concreteTypeId:
            "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198",
        },
        {
          name: "signer_count_threshold",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      name: "init",
      output:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "storage",
          arguments: ["write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "feed_ids",
          concreteTypeId:
            "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
        },
        {
          name: "payload",
          concreteTypeId:
            "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb",
        },
      ],
      name: "get_prices",
      output:
        "e34c2f53d80f2667116e2b1d557ef6e30cf510868fad2bfd788d50d506cd44e0",
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "feed_ids",
          concreteTypeId:
            "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
        },
      ],
      name: "read_prices",
      output:
        "c976e1cf37e7eb4e2c7ec52fb45b98828666366f0e64e99c5b8dd1683fcf4585",
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "read_timestamp",
      output:
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "feed_ids",
          concreteTypeId:
            "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
        },
        {
          name: "payload",
          concreteTypeId:
            "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb",
        },
      ],
      name: "write_prices",
      output:
        "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
      attributes: [
        {
          name: "storage",
          arguments: ["write"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "2882835740755417942",
      concreteTypeId:
        "2801e3d51186db56fbc40e85aa87d50cbb39bc26a0ed79f047fd1908d0656c4e",
    },
    {
      logId: "1515152261580153489",
      concreteTypeId:
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
    },
    {
      logId: "8961848586872524460",
      concreteTypeId:
        "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
    },
    {
      logId: "15587543869071072960",
      concreteTypeId:
        "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
    },
  ],
  messagesTypes: [],
  configurables: [],
};

const storageSlots: StorageSlot[] = [
  {
    key: "1d63cc2495bbf5570c9a6d7f632018dc033107e7f4452405c44601bb771a4a5d",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "1d63cc2495bbf5570c9a6d7f632018dc033107e7f4452405c44601bb771a4a5e",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "6238732d072bd5075fc386b9b4ecec370613a5c5d090822757ee1bd23e9c61f1",
    value: "ffffffffffffffff000000000000000000000000000000000000000000000000",
  },
  {
    key: "f70207fd95bebb96e4a11ad8dcc79ae69597edc049c7457d7c65a8c6a07a7f76",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
];

export class PricesInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    init: FunctionFragment;
    get_prices: FunctionFragment;
    read_prices: FunctionFragment;
    read_timestamp: FunctionFragment;
    write_prices: FunctionFragment;
  };
}

export class Prices extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: PricesInterface;
  declare functions: {
    init: InvokeFunction<
      [allowed_signers: Vec<string>, signer_count_threshold: BigNumberish],
      void
    >;
    get_prices: InvokeFunction<
      [feed_ids: Vec<BigNumberish>, payload: Bytes],
      [Vec<BN>, BN]
    >;
    read_prices: InvokeFunction<[feed_ids: Vec<BigNumberish>], Vec<Option<BN>>>;
    read_timestamp: InvokeFunction<[], BN>;
    write_prices: InvokeFunction<
      [feed_ids: Vec<BigNumberish>, payload: Bytes],
      Vec<BN>
    >;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ) {
    super(id, abi, accountOrProvider);
  }
}
